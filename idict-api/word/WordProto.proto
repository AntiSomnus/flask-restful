syntax = "proto3";
/**
 * WordList
 * list of WordBrief
*/
message WordList {
    repeated WordBrief wordBriefs = 1; //list of WordBrief entities
    repeated WordBrief wordSuggestions = 2; //list of suggestions
}
/**
 * WordBrief
 * brief information of a word
 * @minimal required:
 *      word_in
 *      word_out
 *      chn_definitions
*/
message WordBrief {
    string wordIn = 1; //@required: input word from front-end
    string wordOut = 2; //@required: if findLamma == True: word_out = lemma, else: word_out = word_in
    Pronunciation ukPron = 3; //UK pronunciation for `word_out` if pron=True
    Pronunciation usPron = 4; //US pronunciation for `word_out` if pron=True
    repeated Definition chnDefinitions = 5; //@required: Chinese definitions for `word_out`
    repeated Definition engDefinitions = 6; //English definitions for `word_out` if eng=True
    repeated bool tags = 7; //tag list for `word_out` if tag=True
    Lemma lemma = 8; //describe `word_input` and its lemma if findLamma == True

    message Pronunciation {
        string ps = 1; // phonetic alphabet
        string url = 2; // audio url
    }
    message Definition {
        string pos = 1; //part of speech
        string meaning = 2; //meaning
    }

    message Lemma {
        //required if findLemma == True
        string lemma = 1; //the lemma of `word_in`
        string relation = 2; //relation between `word_in` and `lemma`
    }


}
/**
 * WordDetail
 * Detail information of a word
 * @required: all of them if not otherwise specified
*/
message WordDetail {
    WordBrief wordBrief = 1; //WordBrief entity, word_in = word_out, findLemma = True
    int32 collins = 2; //collins star
    int32 bnc = 3; //bnc index
    int32 frq = 4; //frq index
    repeated SentenceList sentenceLists = 5; //sentence lists
    repeated Derivative derivatives = 6; //all derivatives of `lemma`

    message SentenceList {
        Source source = 1; //sentence source
        repeated Sentence sentences = 2; //sentence in this source
        enum Source {
            OXFORD = 0;
            CAMBRIDGE = 1;
            LONGMAN = 2;
            COLLINS = 3;
            ONLINE = 4;
        }
        message Sentence {
            string eng = 1; //eng sentence
            string chn = 2; //chn sentence
        }
    }

    message Derivative {
        //existed only if isLemma == True
        string word = 1; // word of one of the derivatives
        string relation = 2; //relation between `word` and `word_in`

    }
}
message ChnList {
    repeated ChnDetail chnBriefs = 1;
}
message ChnDetail {
    string chn = 1;
    string reference = 2;
    repeated Meaning meanings = 3;
    repeated Example usages = 4;

    message Meaning {
        string definition = 1;
        repeated string words = 2;
        repeated Example examples = 3;
    }


    message Example {
        string chn = 1;
        repeated string engs = 2;
    }

}
